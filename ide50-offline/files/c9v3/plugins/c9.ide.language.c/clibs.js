define(function(require, exports, module) {

module.exports = {"GetInt":{"fullname":"<b>int</b> GetInt(<b>void)","name":"GetInt(<b>void)","lib":"cs50.h","purpose":"Returns an int from stdin","code":"GetInt(^^)"},"GetDouble":{"fullname":"<b>double</b> GetDouble(<b>void)","name":"GetDouble(<b>void)","lib":"cs50.h","purpose":"Returns a double from stdin","code":"GetDouble(^^)"},"GetLongLong":{"fullname":"<b>long long</b> GetLongLong(<b>void)","name":"GetLongLong(<b>void)","lib":"cs50.h","purpose":"Returns a long long from stdin","code":"GetLongLong(^^)"},"GetFloat":{"fullname":"<b>float</b> GetFloat(<b>void)","name":"GetFloat(<b>void)","lib":"cs50.h","purpose":"Returns a float from stdin","code":"GetFloat(^^)"},"GetString":{"fullname":"<b>string</b> GetString(<b>void)","name":"GetString(<b>void)","lib":"cs50.h","purpose":"Returns a string from stdin","code":"GetString(^^)"},"GetChar":{"fullname":"<b>char</b> GetChar(<b>void)","name":"GetChar(<b>void)","lib":"cs50.h","purpose":"Returns a char from stdin","code":"GetChar(^^)"},"isblank":{"fullname":"<b>int</b> isblank(<b>int</b> c)","name":"isblank(<b>int</b> c)","lib":"ctype.h","purpose":"Checks if character is alphanumeric","code":"isblank(^^)"},"isalpha":{"fullname":"<b>int</b> isalpha(<b>int</b> c)","name":"isalpha(<b>int</b> c)","lib":"ctype.h","purpose":"Checks if character is an alphabetic letter.","code":"isalpha(^^)"},"isdigit":{"fullname":"<b>int</b> isdigit(<b>int</b> c)","name":"isdigit(<b>int</b> c)","lib":"ctype.h","purpose":"Checks if character is a digit","code":"isdigit(^^)"},"isgraph":{"fullname":"<b>int</b> isgraph(<b>int</b> c)","name":"isgraph(<b>int</b> c)","lib":"ctype.h","purpose":"Checks if character is graphical","code":"isgraph(^^)"},"iscntrl":{"fullname":"<b>int</b> iscntrl(<b>int</b> c)","name":"iscntrl(<b>int</b> c)","lib":"ctype.h","purpose":"Checks if character is control","code":"iscntrl(^^)"},"ispunct":{"fullname":"<b>int</b> ispunct(<b>int</b> c)","name":"ispunct(<b>int</b> c)","lib":"ctype.h","purpose":"Checks if character is a punctuation mark","code":"ispunct(^^)"},"isprint":{"fullname":"<b>int</b> isprint(<b>int</b> c)","name":"isprint(<b>int</b> c)","lib":"ctype.h","purpose":"Checks if character is printable","code":"isprint(^^)"},"isspace":{"fullname":"<b>int</b> isspace(<b>int</b> c)","name":"isspace(<b>int</b> c)","lib":"ctype.h","purpose":"Checks if character is a white-space","code":"isspace(^^)"},"islower":{"fullname":"<b>int</b> islower(<b>int</b> c)","name":"islower(<b>int</b> c)","lib":"ctype.h","purpose":"Checks if character is lowercase","code":"islower(^^)"},"isupper":{"fullname":"<b>int</b> isupper(<b>int</b> c)","name":"isupper(<b>int</b> c)","lib":"ctype.h","purpose":"Checks if character is uppercase","code":"isupper(^^)"},"isxdigit":{"fullname":"<b>int</b> isxdigit(<b>int</b> c)","name":"isxdigit(<b>int</b> c)","lib":"ctype.h","purpose":"Checks if character is hexadecimal","code":"isxdigit(^^)"},"toupper":{"fullname":"<b>int</b> toupper(<b>int</b> c)","name":"toupper(<b>int</b> c)","lib":"ctype.h","purpose":"Converts letter to uppercase","code":"toupper(^^)"},"tolower":{"fullname":"<b>int</b> tolower(<b>int</b> c)","name":"tolower(<b>int</b> c)","lib":"ctype.h","purpose":"Converts letter to lowercase","code":"tolower(^^)"},"lconv":{"fullname":"<b>struct  *localeconv</b> lconv(<b>void)","name":"lconv(<b>void)","lib":"locale.h","purpose":"Get numeric formatting information","code":"lconv(^^)"},"setlocale":{"fullname":"<b>char *</b> setlocale(<b>int</b> category, <b>const <b>char <b>*</b> locale)","name":"setlocale(<b>int</b> category, <b>const <b>char <b>*</b> locale)","lib":"locale.h","purpose":"Set the current locale","code":"setlocale(^^)"},"acosh":{"fullname":"<b>double</b> acosh(<b>double</b> x)","name":"acosh(<b>double</b> x)","lib":"math.h","purpose":"Inverse hyperbolic cosine function","code":"acosh(^^)"},"acoshf":{"fullname":"<b>float</b> acoshf(<b>float</b> x)","name":"acoshf(<b>float</b> x)","lib":"math.h","purpose":"Inverse hyperbolic cosine function","code":"acoshf(^^)"},"acoshl":{"fullname":"<b>long double</b> acoshl(<b>long double</b> x)","name":"acoshl(<b>long double</b> x)","lib":"math.h","purpose":"Inverse hyperbolic cosine function","code":"acoshl(^^)"},"acos":{"fullname":"<b>double</b> acos(<b>double</b> x)","name":"acos(<b>double</b> x)","lib":"math.h","purpose":"Arc cosine function","code":"acos(^^)"},"acosf":{"fullname":"<b>float</b> acosf(<b>float</b> x)","name":"acosf(<b>float</b> x)","lib":"math.h","purpose":"Arc cosine function","code":"acosf(^^)"},"acosl":{"fullname":"<b>long double</b> acosl(<b>long double</b> x)","name":"acosl(<b>long double</b> x)","lib":"math.h","purpose":"Arc cosine function","code":"acosl(^^)"},"ceil":{"fullname":"<b>double</b> ceil(<b>double</b> x)","name":"ceil(<b>double</b> x)","lib":"math.h","purpose":"Rounds up value","code":"ceil(^^)"},"asinh":{"fullname":"<b>double</b> asinh(<b>double</b> x)","name":"asinh(<b>double</b> x)","lib":"math.h","purpose":"Inverse hyperbolic sine function","code":"asinh(^^)"},"asinhf":{"fullname":"<b>float</b> asinhf(<b>float</b> x)","name":"asinhf(<b>float</b> x)","lib":"math.h","purpose":"Inverse hyperbolic sine function","code":"asinhf(^^)"},"asinhl":{"fullname":"<b>long double</b> asinhl(<b>long double</b> x)","name":"asinhl(<b>long double</b> x)","lib":"math.h","purpose":"Inverse hyperbolic sine function","code":"asinhl(^^)"},"asin":{"fullname":"<b>double</b> asin(<b>double</b> x)","name":"asin(<b>double</b> x)","lib":"math.h","purpose":"Arc sine function","code":"asin(^^)"},"asinf":{"fullname":"<b>float</b> asinf(<b>float</b> x)","name":"asinf(<b>float</b> x)","lib":"math.h","purpose":"Arc sine function","code":"asinf(^^)"},"asinl":{"fullname":"<b>long double</b> asinl(<b>long double</b> x)","name":"asinl(<b>long double</b> x)","lib":"math.h","purpose":"Arc sine function","code":"asinl(^^)"},"atan":{"fullname":"<b>double</b> atan(<b>double</b> x)","name":"atan(<b>double</b> x)","lib":"math.h","purpose":"Arc tangent function","code":"atan(^^)"},"atanf":{"fullname":"<b>float</b> atanf(<b>float</b> x)","name":"atanf(<b>float</b> x)","lib":"math.h","purpose":"Arc tangent function","code":"atanf(^^)"},"atanl":{"fullname":"<b>long double</b> atanl(<b>long double</b> x)","name":"atanl(<b>long double</b> x)","lib":"math.h","purpose":"Arc tangent function","code":"atanl(^^)"},"atan2":{"fullname":"<b>double</b> atan2(<b>double</b> y, <b>double</b> x)","name":"atan2(<b>double</b> y, <b>double</b> x)","lib":"math.h","purpose":"Arc tangent function of two variables","code":"atan2(^^)"},"atan2f":{"fullname":"<b>float</b> atan2f(<b>float</b> y, <b>float</b> x)","name":"atan2f(<b>float</b> y, <b>float</b> x)","lib":"math.h","purpose":"Arc tangent function of two variables","code":"atan2f(^^)"},"atan2l":{"fullname":"<b>long double</b> atan2l(<b>long double</b> y, <b>long <b>double</b> x)","name":"atan2l(<b>long double</b> y, <b>long <b>double</b> x)","lib":"math.h","purpose":"Arc tangent function of two variables","code":"atan2l(^^)"},"cos":{"fullname":"<b>double</b> cos(<b>double</b> x)","name":"cos(<b>double</b> x)","lib":"math.h","purpose":"Computes cosine","code":"cos(^^)"},"atanh":{"fullname":"<b>double</b> atanh(<b>double</b> x)","name":"atanh(<b>double</b> x)","lib":"math.h","purpose":"Inverse hyperbolic tangent function","code":"atanh(^^)"},"atanhf":{"fullname":"<b>float</b> atanhf(<b>float</b> x)","name":"atanhf(<b>float</b> x)","lib":"math.h","purpose":"Inverse hyperbolic tangent function","code":"atanhf(^^)"},"atanhl":{"fullname":"<b>long double</b> atanhl(<b>long double</b> x)","name":"atanhl(<b>long double</b> x)","lib":"math.h","purpose":"Inverse hyperbolic tangent function","code":"atanhl(^^)"},"exp":{"fullname":"<b>double</b> exp(<b>double</b> x)","name":"exp(<b>double</b> x)","lib":"math.h","purpose":"Computes exponential","code":"exp(^^)"},"copysign":{"fullname":"<b>double</b> copysign(<b>double</b> x, <b>double</b> y)","name":"copysign(<b>double</b> x, <b>double</b> y)","lib":"math.h","purpose":"Copy sign of a number","code":"copysign(^^)"},"copysignf":{"fullname":"<b>float</b> copysignf(<b>float</b> x, <b>float</b> y)","name":"copysignf(<b>float</b> x, <b>float</b> y)","lib":"math.h","purpose":"Copy sign of a number","code":"copysignf(^^)"},"copysignl":{"fullname":"<b>long double</b> copysignl(<b>long double</b> x, <b>long <b>double</b> y)","name":"copysignl(<b>long double</b> x, <b>long <b>double</b> y)","lib":"math.h","purpose":"Copy sign of a number","code":"copysignl(^^)"},"cosh":{"fullname":"<b>double</b> cosh(<b>double</b> x)","name":"cosh(<b>double</b> x)","lib":"math.h","purpose":"Hyperbolic cosine function","code":"cosh(^^)"},"coshf":{"fullname":"<b>float</b> coshf(<b>float</b> x)","name":"coshf(<b>float</b> x)","lib":"math.h","purpose":"Hyperbolic cosine function","code":"coshf(^^)"},"coshl":{"fullname":"<b>long double</b> coshl(<b>long double</b> x)","name":"coshl(<b>long double</b> x)","lib":"math.h","purpose":"Hyperbolic cosine function","code":"coshl(^^)"},"erf":{"fullname":"<b>double</b> erf(<b>double</b> x)","name":"erf(<b>double</b> x)","lib":"math.h","purpose":"Error function","code":"erf(^^)"},"erff":{"fullname":"<b>float</b> erff(<b>float</b> x)","name":"erff(<b>float</b> x)","lib":"math.h","purpose":"Error function","code":"erff(^^)"},"erfl":{"fullname":"<b>long double</b> erfl(<b>long double</b> x)","name":"erfl(<b>long double</b> x)","lib":"math.h","purpose":"Error function","code":"erfl(^^)"},"erfc":{"fullname":"<b>double</b> erfc(<b>double</b> x)","name":"erfc(<b>double</b> x)","lib":"math.h","purpose":"Complementary error function","code":"erfc(^^)"},"erfcf":{"fullname":"<b>float</b> erfcf(<b>float</b> x)","name":"erfcf(<b>float</b> x)","lib":"math.h","purpose":"Complementary error function","code":"erfcf(^^)"},"erfcl":{"fullname":"<b>long double</b> erfcl(<b>long double</b> x)","name":"erfcl(<b>long double</b> x)","lib":"math.h","purpose":"Complementary error function","code":"erfcl(^^)"},"fabs":{"fullname":"<b>double</b> fabs(<b>double</b> x)","name":"fabs(<b>double</b> x)","lib":"math.h","purpose":"Computes absolute value","code":"fabs(^^)"},"exp2":{"fullname":"<b>double</b> exp2(<b>double</b> x)","name":"exp2(<b>double</b> x)","lib":"math.h","purpose":"Base-2 exponential function","code":"exp2(^^)"},"exp2f":{"fullname":"<b>float</b> exp2f(<b>float</b> x)","name":"exp2f(<b>float</b> x)","lib":"math.h","purpose":"Base-2 exponential function","code":"exp2f(^^)"},"exp2l":{"fullname":"<b>long double</b> exp2l(<b>long double</b> x)","name":"exp2l(<b>long double</b> x)","lib":"math.h","purpose":"Base-2 exponential function","code":"exp2l(^^)"},"floor":{"fullname":"<b>double</b> floor(<b>double</b> x)","name":"floor(<b>double</b> x)","lib":"math.h","purpose":"Rounds down value","code":"floor(^^)"},"expm1":{"fullname":"<b>double</b> expm1(<b>double</b> x)","name":"expm1(<b>double</b> x)","lib":"math.h","purpose":"Exponential minus 1","code":"expm1(^^)"},"expm1f":{"fullname":"<b>float</b> expm1f(<b>float</b> x)","name":"expm1f(<b>float</b> x)","lib":"math.h","purpose":"Exponential minus 1","code":"expm1f(^^)"},"expm1l":{"fullname":"<b>long double</b> expm1l(<b>long double</b> x)","name":"expm1l(<b>long double</b> x)","lib":"math.h","purpose":"Exponential minus 1","code":"expm1l(^^)"},"fdim":{"fullname":"<b>double</b> fdim(<b>double</b> x, <b>double</b> y)","name":"fdim(<b>double</b> x, <b>double</b> y)","lib":"math.h","purpose":"Positive difference","code":"fdim(^^)"},"fdimf":{"fullname":"<b>float</b> fdimf(<b>float</b> x, <b>float</b> y)","name":"fdimf(<b>float</b> x, <b>float</b> y)","lib":"math.h","purpose":"Positive difference","code":"fdimf(^^)"},"fdiml":{"fullname":"<b>long double</b> fdiml(<b>long double</b> x, <b>long <b>double</b> y)","name":"fdiml(<b>long double</b> x, <b>long <b>double</b> y)","lib":"math.h","purpose":"Positive difference","code":"fdiml(^^)"},"fmin":{"fullname":"<b>double</b> fmin(<b>double</b> x, <b>double</b> y)","name":"fmin(<b>double</b> x, <b>double</b> y)","lib":"math.h","purpose":"Determine minimum of two floating-point numbers","code":"fmin(^^)"},"fminf":{"fullname":"<b>float</b> fminf(<b>float</b> x, <b>float</b> y)","name":"fminf(<b>float</b> x, <b>float</b> y)","lib":"math.h","purpose":"Determine minimum of two floating-point numbers","code":"fminf(^^)"},"fminl":{"fullname":"<b>long double</b> fminl(<b>long double</b> x, <b>long <b>double</b> y)","name":"fminl(<b>long double</b> x, <b>long <b>double</b> y)","lib":"math.h","purpose":"Determine minimum of two floating-point numbers","code":"fminl(^^)"},"fmax":{"fullname":"<b>double</b> fmax(<b>double</b> x, <b>double</b> y)","name":"fmax(<b>double</b> x, <b>double</b> y)","lib":"math.h","purpose":"Determine maximum of two floating-point numbers","code":"fmax(^^)"},"fmaxf":{"fullname":"<b>float</b> fmaxf(<b>float</b> x, <b>float</b> y)","name":"fmaxf(<b>float</b> x, <b>float</b> y)","lib":"math.h","purpose":"Determine maximum of two floating-point numbers","code":"fmaxf(^^)"},"fmaxl":{"fullname":"<b>long double</b> fmaxl(<b>long double</b> x, <b>long <b>double</b> y)","name":"fmaxl(<b>long double</b> x, <b>long <b>double</b> y)","lib":"math.h","purpose":"Determine maximum of two floating-point numbers","code":"fmaxl(^^)"},"fma":{"fullname":"<b>double</b> fma(<b>double</b> x, <b>double</b> y, <b>double</b> z)","name":"fma(<b>double</b> x, <b>double</b> y, <b>double</b> z)","lib":"math.h","purpose":"Floating-point multiply and add","code":"fma(^^)"},"fmaf":{"fullname":"<b>float</b> fmaf(<b>float</b> x, <b>float</b> y, <b>float</b> z)","name":"fmaf(<b>float</b> x, <b>float</b> y, <b>float</b> z)","lib":"math.h","purpose":"Floating-point multiply and add","code":"fmaf(^^)"},"fmal":{"fullname":"<b>long double</b> fmal(<b>long double</b> x, <b>long <b>double</b> y, <b>long <b>double</b> z)","name":"fmal(<b>long double</b> x, <b>long <b>double</b> y, <b>long <b>double</b> z)","lib":"math.h","purpose":"Floating-point multiply and add","code":"fmal(^^)"},"fmod":{"fullname":"<b>double</b> fmod(<b>double</b> x, <b>double</b> y)","name":"fmod(<b>double</b> x, <b>double</b> y)","lib":"math.h","purpose":"Floating-point remainder function","code":"fmod(^^)"},"fmodf":{"fullname":"<b>float</b> fmodf(<b>float</b> x, <b>float</b> y)","name":"fmodf(<b>float</b> x, <b>float</b> y)","lib":"math.h","purpose":"Floating-point remainder function","code":"fmodf(^^)"},"fmodl":{"fullname":"<b>long double</b> fmodl(<b>long double</b> x, <b>long <b>double</b> y)","name":"fmodl(<b>long double</b> x, <b>long <b>double</b> y)","lib":"math.h","purpose":"Floating-point remainder function","code":"fmodl(^^)"},"fpclassify":{"fullname":"<b>int</b> fpclassify(<b>x)","name":"fpclassify(<b>x)","lib":"math.h","purpose":"Floating-point classification macros","code":"fpclassify(^^)"},"isfinite":{"fullname":"<b>int</b> isfinite(<b>x)","name":"isfinite(<b>x)","lib":"math.h","purpose":"Floating-point classification macros","code":"isfinite(^^)"},"isnormal":{"fullname":"<b>int</b> isnormal(<b>x)","name":"isnormal(<b>x)","lib":"math.h","purpose":"Floating-point classification macros","code":"isnormal(^^)"},"isnan":{"fullname":"<b>int</b> isnan(<b>x)","name":"isnan(<b>x)","lib":"math.h","purpose":"Floating-point classification macros","code":"isnan(^^)"},"isinf":{"fullname":"<b>int</b> isinf(<b>x)","name":"isinf(<b>x)","lib":"math.h","purpose":"Floating-point classification macros","code":"isinf(^^)"},"frexp":{"fullname":"<b>double</b> frexp(<b>double</b> x, <b>int <b>*</b> exp)","name":"frexp(<b>double</b> x, <b>int <b>*</b> exp)","lib":"math.h","purpose":"Convert floating-point number to fractional and integral components","code":"frexp(^^)"},"frexpf":{"fullname":"<b>float</b> frexpf(<b>float</b> x, <b>int <b>*</b> exp)","name":"frexpf(<b>float</b> x, <b>int <b>*</b> exp)","lib":"math.h","purpose":"Convert floating-point number to fractional and integral components","code":"frexpf(^^)"},"frexpl":{"fullname":"<b>long double</b> frexpl(<b>long double</b> x, <b>int <b>*</b> exp)","name":"frexpl(<b>long double</b> x, <b>int <b>*</b> exp)","lib":"math.h","purpose":"Convert floating-point number to fractional and integral components","code":"frexpl(^^)"},"ilogb":{"fullname":"<b>int</b> ilogb(<b>double</b> x)","name":"ilogb(<b>double</b> x)","lib":"math.h","purpose":"Get integer exponent of a floating-point value","code":"ilogb(^^)"},"ilogbf":{"fullname":"<b>int</b> ilogbf(<b>float</b> x)","name":"ilogbf(<b>float</b> x)","lib":"math.h","purpose":"Get integer exponent of a floating-point value","code":"ilogbf(^^)"},"ilogbl":{"fullname":"<b>int</b> ilogbl(<b>long double</b> x)","name":"ilogbl(<b>long double</b> x)","lib":"math.h","purpose":"Get integer exponent of a floating-point value","code":"ilogbl(^^)"},"isgreater":{"fullname":"<b>int</b> isgreater(<b>x,</b> y)","name":"isgreater(<b>x,</b> y)","lib":"math.h","purpose":"Floating-point relational tests without exception for NaN","code":"isgreater(^^)"},"isgreaterequal":{"fullname":"<b>int</b> isgreaterequal(<b>x,</b> y)","name":"isgreaterequal(<b>x,</b> y)","lib":"math.h","purpose":"Floating-point relational tests without exception for NaN","code":"isgreaterequal(^^)"},"isless":{"fullname":"<b>int</b> isless(<b>x,</b> y)","name":"isless(<b>x,</b> y)","lib":"math.h","purpose":"Floating-point relational tests without exception for NaN","code":"isless(^^)"},"islessequal":{"fullname":"<b>int</b> islessequal(<b>x,</b> y)","name":"islessequal(<b>x,</b> y)","lib":"math.h","purpose":"Floating-point relational tests without exception for NaN","code":"islessequal(^^)"},"islessgreater":{"fullname":"<b>int</b> islessgreater(<b>x,</b> y)","name":"islessgreater(<b>x,</b> y)","lib":"math.h","purpose":"Floating-point relational tests without exception for NaN","code":"islessgreater(^^)"},"isunordered":{"fullname":"<b>int</b> isunordered(<b>x,</b> y)","name":"isunordered(<b>x,</b> y)","lib":"math.h","purpose":"Floating-point relational tests without exception for NaN","code":"isunordered(^^)"},"tan":{"fullname":"<b>double</b> tan(<b>double</b> x)","name":"tan(<b>double</b> x)","lib":"math.h","purpose":"Computes tangent","code":"tan(^^)"},"sinh":{"fullname":"<b>double</b> sinh(<b>double</b> x)","name":"sinh(<b>double</b> x)","lib":"math.h","purpose":"Hyperbolic sine function","code":"sinh(^^)"},"sinhf":{"fullname":"<b>float</b> sinhf(<b>float</b> x)","name":"sinhf(<b>float</b> x)","lib":"math.h","purpose":"Hyperbolic sine function","code":"sinhf(^^)"},"sinhl":{"fullname":"<b>long double</b> sinhl(<b>long double</b> x)","name":"sinhl(<b>long double</b> x)","lib":"math.h","purpose":"Hyperbolic sine function","code":"sinhl(^^)"},"raise":{"fullname":"<b>int</b> raise(<b>int</b> sig)","name":"raise(<b>int</b> sig)","lib":"signal.h","purpose":"Send a signal to the caller","code":"raise(^^)"},"longjmp":{"fullname":"<b>void</b> longjmp(<b>jmp_buf</b> env, <b>int</b> val)","name":"longjmp(<b>jmp_buf</b> env, <b>int</b> val)","lib":"setjmp.h","purpose":"Nonlocal jump to a saved stack context","code":"longjmp(^^)"},"siglongjmp":{"fullname":"<b>void</b> siglongjmp(<b>sigjmp_buf</b> env, <b>int</b> val)","name":"siglongjmp(<b>sigjmp_buf</b> env, <b>int</b> val)","lib":"setjmp.h","purpose":"Nonlocal jump to a saved stack context","code":"siglongjmp(^^)"},"setjmp":{"fullname":"<b>int</b> setjmp(<b>jmp_buf</b> env)","name":"setjmp(<b>jmp_buf</b> env)","lib":"setjmp.h","purpose":"Save stack context for nonlocal goto","code":"setjmp(^^)"},"sigsetjmp":{"fullname":"<b>int</b> sigsetjmp(<b>sigjmp_buf</b> env, <b>int</b> savesigs)","name":"sigsetjmp(<b>sigjmp_buf</b> env, <b>int</b> savesigs)","lib":"setjmp.h","purpose":"Save stack context for nonlocal goto","code":"sigsetjmp(^^)"},"tgamma":{"fullname":"<b>double</b> tgamma(<b>double</b> x)","name":"tgamma(<b>double</b> x)","lib":"math.h","purpose":"True gamma function","code":"tgamma(^^)"},"tgammaf":{"fullname":"<b>float</b> tgammaf(<b>float</b> x)","name":"tgammaf(<b>float</b> x)","lib":"math.h","purpose":"True gamma function","code":"tgammaf(^^)"},"tgammal":{"fullname":"<b>long double</b> tgammal(<b>long double</b> x)","name":"tgammal(<b>long double</b> x)","lib":"math.h","purpose":"True gamma function","code":"tgammal(^^)"},"trunc":{"fullname":"<b>double</b> trunc(<b>double</b> x)","name":"trunc(<b>double</b> x)","lib":"math.h","purpose":"Round to integer, toward zero","code":"trunc(^^)"},"truncf":{"fullname":"<b>float</b> truncf(<b>float</b> x)","name":"truncf(<b>float</b> x)","lib":"math.h","purpose":"Round to integer, toward zero","code":"truncf(^^)"},"truncl":{"fullname":"<b>long double</b> truncl(<b>long double</b> x)","name":"truncl(<b>long double</b> x)","lib":"math.h","purpose":"Round to integer, toward zero","code":"truncl(^^)"},"va_start":{"fullname":"<b>void</b> va_start(<b>va_list</b> ap,</b> last)","name":"va_start(<b>va_list</b> ap,</b> last)","lib":"stdarg.h","purpose":"Variable argument lists","code":"va_start(^^)"},"va_arg":{"fullname":"<b>type</b> va_arg(<b>va_list</b> ap,</b> type)","name":"va_arg(<b>va_list</b> ap,</b> type)","lib":"stdarg.h","purpose":"Variable argument lists","code":"va_arg(^^)"},"va_end":{"fullname":"<b>void</b> va_end(<b>va_list</b> ap)","name":"va_end(<b>va_list</b> ap)","lib":"stdarg.h","purpose":"Variable argument lists","code":"va_end(^^)"},"va_copy":{"fullname":"<b>void</b> va_copy(<b>va_list</b> dest, <b>va_list</b> src)","name":"va_copy(<b>va_list</b> dest, <b>va_list</b> src)","lib":"stdarg.h","purpose":"Variable argument lists","code":"va_copy(^^)"},"log":{"fullname":"<b>double</b> log(<b>double</b> x)","name":"log(<b>double</b> x)","lib":"math.h","purpose":"Computes natural logarithm","code":"log(^^)"},"log10":{"fullname":"<b>double</b> log10(<b>double</b> x)","name":"log10(<b>double</b> x)","lib":"math.h","purpose":"Computes logarithm","code":"log10(^^)"},"ldexp":{"fullname":"<b>double</b> ldexp(<b>double</b> x, <b>int</b> exp)","name":"ldexp(<b>double</b> x, <b>int</b> exp)","lib":"math.h","purpose":"Multiply floating-point number by integral power of 2","code":"ldexp(^^)"},"ldexpf":{"fullname":"<b>float</b> ldexpf(<b>float</b> x, <b>int</b> exp)","name":"ldexpf(<b>float</b> x, <b>int</b> exp)","lib":"math.h","purpose":"Multiply floating-point number by integral power of 2","code":"ldexpf(^^)"},"ldexpl":{"fullname":"<b>long double</b> ldexpl(<b>long double</b> x, <b>int</b> exp)","name":"ldexpl(<b>long double</b> x, <b>int</b> exp)","lib":"math.h","purpose":"Multiply floating-point number by integral power of 2","code":"ldexpl(^^)"},"lrint":{"fullname":"<b>long int</b> lrint(<b>double</b> x)","name":"lrint(<b>double</b> x)","lib":"math.h","purpose":"Round to nearest integer","code":"lrint(^^)"},"lrintf":{"fullname":"<b>long int</b> lrintf(<b>float</b> x)","name":"lrintf(<b>float</b> x)","lib":"math.h","purpose":"Round to nearest integer","code":"lrintf(^^)"},"lrintl":{"fullname":"<b>long int</b> lrintl(<b>long double</b> x)","name":"lrintl(<b>long double</b> x)","lib":"math.h","purpose":"Round to nearest integer","code":"lrintl(^^)"},"llrint":{"fullname":"<b>long long int</b> llrint(<b>double</b> x)","name":"llrint(<b>double</b> x)","lib":"math.h","purpose":"Round to nearest integer","code":"llrint(^^)"},"llrintf":{"fullname":"<b>long long int</b> llrintf(<b>float</b> x)","name":"llrintf(<b>float</b> x)","lib":"math.h","purpose":"Round to nearest integer","code":"llrintf(^^)"},"llrintl":{"fullname":"<b>long long int</b> llrintl(<b>long double</b> x)","name":"llrintl(<b>long double</b> x)","lib":"math.h","purpose":"Round to nearest integer","code":"llrintl(^^)"},"log2":{"fullname":"<b>double</b> log2(<b>double</b> x)","name":"log2(<b>double</b> x)","lib":"math.h","purpose":"Computes base 2 logarithm","code":"log2(^^)"},"log1p":{"fullname":"<b>double</b> log1p(<b>double</b> x)","name":"log1p(<b>double</b> x)","lib":"math.h","purpose":" logarithm of 1 plus argument","code":"log1p(^^)"},"log1pf":{"fullname":"<b>float</b> log1pf(<b>float</b> x)","name":"log1pf(<b>float</b> x)","lib":"math.h","purpose":" logarithm of 1 plus argument","code":"log1pf(^^)"},"log1pl":{"fullname":"<b>long double</b> log1pl(<b>long double</b> x)","name":"log1pl(<b>long double</b> x)","lib":"math.h","purpose":" logarithm of 1 plus argument","code":"log1pl(^^)"},"lround":{"fullname":"<b>long int</b> lround(<b>double</b> x)","name":"lround(<b>double</b> x)","lib":"math.h","purpose":"Round to nearest integer, away from zero","code":"lround(^^)"},"lroundf":{"fullname":"<b>long int</b> lroundf(<b>float</b> x)","name":"lroundf(<b>float</b> x)","lib":"math.h","purpose":"Round to nearest integer, away from zero","code":"lroundf(^^)"},"lroundl":{"fullname":"<b>long int</b> lroundl(<b>long double</b> x)","name":"lroundl(<b>long double</b> x)","lib":"math.h","purpose":"Round to nearest integer, away from zero","code":"lroundl(^^)"},"llround":{"fullname":"<b>long long int</b> llround(<b>double</b> x)","name":"llround(<b>double</b> x)","lib":"math.h","purpose":"Round to nearest integer, away from zero","code":"llround(^^)"},"llroundf":{"fullname":"<b>long long int</b> llroundf(<b>float</b> x)","name":"llroundf(<b>float</b> x)","lib":"math.h","purpose":"Round to nearest integer, away from zero","code":"llroundf(^^)"},"llroundl":{"fullname":"<b>long long int</b> llroundl(<b>long double</b> x)","name":"llroundl(<b>long double</b> x)","lib":"math.h","purpose":"Round to nearest integer, away from zero","code":"llroundl(^^)"},"logb":{"fullname":"<b>double</b> logb(<b>double</b> x)","name":"logb(<b>double</b> x)","lib":"math.h","purpose":"Get exponent of a floating-point value","code":"logb(^^)"},"logbf":{"fullname":"<b>float</b> logbf(<b>float</b> x)","name":"logbf(<b>float</b> x)","lib":"math.h","purpose":"Get exponent of a floating-point value","code":"logbf(^^)"},"logbl":{"fullname":"<b>long double</b> logbl(<b>long double</b> x)","name":"logbl(<b>long double</b> x)","lib":"math.h","purpose":"Get exponent of a floating-point value","code":"logbl(^^)"},"pow":{"fullname":"<b>double</b> pow(<b>double</b> x, <b>double</b> 1)","name":"pow(<b>double</b> x, <b>double</b> 1)","lib":"math.h","purpose":"Computes remainder","code":"pow(^^)"},"modf":{"fullname":"<b>double</b> modf(<b>double</b> x, <b>double <b>*</b> iptr)","name":"modf(<b>double</b> x, <b>double <b>*</b> iptr)","lib":"math.h","purpose":"Extract signed integral and fractional values from floating-point number","code":"modf(^^)"},"modff":{"fullname":"<b>float</b> modff(<b>float</b> x, <b>float <b>*</b> iptr)","name":"modff(<b>float</b> x, <b>float <b>*</b> iptr)","lib":"math.h","purpose":"Extract signed integral and fractional values from floating-point number","code":"modff(^^)"},"modfl":{"fullname":"<b>long double</b> modfl(<b>long double</b> x, <b>long <b>double <b>*</b> iptr)","name":"modfl(<b>long double</b> x, <b>long <b>double <b>*</b> iptr)","lib":"math.h","purpose":"Extract signed integral and fractional values from floating-point number","code":"modfl(^^)"},"round":{"fullname":"<b>double</b> round(<b>double</b> x)","name":"round(<b>double</b> x)","lib":"math.h","purpose":"Rounds value","code":"round(^^)"},"remquo":{"fullname":"<b>double</b> remquo(<b>double</b> x, <b>double</b> y, <b>int <b>*</b> quo)","name":"remquo(<b>double</b> x, <b>double</b> y, <b>int <b>*</b> quo)","lib":"math.h","purpose":"Remainder and part of quotient","code":"remquo(^^)"},"remquof":{"fullname":"<b>float</b> remquof(<b>float</b> x, <b>float</b> y, <b>int <b>*</b> quo)","name":"remquof(<b>float</b> x, <b>float</b> y, <b>int <b>*</b> quo)","lib":"math.h","purpose":"Remainder and part of quotient","code":"remquof(^^)"},"remquol":{"fullname":"<b>long double</b> remquol(<b>long double</b> x, <b>long <b>double</b> y, <b>int <b>*</b> quo)","name":"remquol(<b>long double</b> x, <b>long <b>double</b> y, <b>int <b>*</b> quo)","lib":"math.h","purpose":"Remainder and part of quotient","code":"remquol(^^)"},"sin":{"fullname":"<b>double</b> sin(<b>double</b> x)","name":"sin(<b>double</b> x)","lib":"math.h","purpose":"Computes sine","code":"sin(^^)"},"signbit":{"fullname":"<b>int</b> signbit(<b>x)","name":"signbit(<b>x)","lib":"math.h","purpose":"Test sign of a real floating-point number","code":"signbit(^^)"},"scalbln":{"fullname":"<b>double</b> scalbln(<b>double</b> x, <b>long <b>int</b> exp)","name":"scalbln(<b>double</b> x, <b>long <b>int</b> exp)","lib":"math.h","purpose":"Multiply floating-point number by integral power of radix","code":"scalbln(^^)"},"scalblnf":{"fullname":"<b>float</b> scalblnf(<b>float</b> x, <b>long <b>int</b> exp)","name":"scalblnf(<b>float</b> x, <b>long <b>int</b> exp)","lib":"math.h","purpose":"Multiply floating-point number by integral power of radix","code":"scalblnf(^^)"},"scalblnl":{"fullname":"<b>long double</b> scalblnl(<b>long double</b> x, <b>long <b>int</b> exp)","name":"scalblnl(<b>long double</b> x, <b>long <b>int</b> exp)","lib":"math.h","purpose":"Multiply floating-point number by integral power of radix","code":"scalblnl(^^)"},"scalbn":{"fullname":"<b>double</b> scalbn(<b>double</b> x, <b>int</b> exp)","name":"scalbn(<b>double</b> x, <b>int</b> exp)","lib":"math.h","purpose":"Multiply floating-point number by integral power of radix","code":"scalbn(^^)"},"scalbnf":{"fullname":"<b>float</b> scalbnf(<b>float</b> x, <b>int</b> exp)","name":"scalbnf(<b>float</b> x, <b>int</b> exp)","lib":"math.h","purpose":"Multiply floating-point number by integral power of radix","code":"scalbnf(^^)"},"scalbnl":{"fullname":"<b>long double</b> scalbnl(<b>long double</b> x, <b>int</b> exp)","name":"scalbnl(<b>long double</b> x, <b>int</b> exp)","lib":"math.h","purpose":"Multiply floating-point number by integral power of radix","code":"scalbnl(^^)"},"sqrt":{"fullname":"<b>double</b> sqrt(<b>double</b> x)","name":"sqrt(<b>double</b> x)","lib":"math.h","purpose":"Computes square root","code":"sqrt(^^)"},"fclose":{"fullname":"<b>int</b> fclose(<b>FILE*</b> fp)","name":"fclose(<b>FILE*</b> fp)","lib":"stdio.h","purpose":"Close an open file","code":"fclose(^^)"},"clearerr":{"fullname":"<b>void</b> clearerr(<b>FILE *</b> stream)","name":"clearerr(<b>FILE *</b> stream)","lib":"stdio.h","purpose":"Check and reset stream status","code":"clearerr(^^)"},"feof":{"fullname":"<b>int</b> feof(<b>FILE*</b> fp)","name":"feof(<b>FILE*</b> fp)","lib":"stdio.h","purpose":"Checks whether pointer to file has reached the end of the file","code":"feof(^^)"},"ferror":{"fullname":"<b>int</b> ferror(<b>FILE *</b> stream)","name":"ferror(<b>FILE *</b> stream)","lib":"stdio.h","purpose":"Check and reset stream status","code":"ferror(^^)"},"fileno":{"fullname":"<b>int</b> fileno(<b>FILE *</b> stream)","name":"fileno(<b>FILE *</b> stream)","lib":"stdio.h","purpose":"Check and reset stream status","code":"fileno(^^)"},"fgetc":{"fullname":"<b>int</b> fgetc(<b>FILE *</b> stream)","name":"fgetc(<b>FILE *</b> stream)","lib":"stdio.h","purpose":"Input of characters and strings","code":"fgetc(^^)"},"fgets":{"fullname":"<b>char *</b> fgets(<b>char *</b> s, <b>int</b> size, <b>FILE <b>*</b> stream)","name":"fgets(<b>char *</b> s, <b>int</b> size, <b>FILE <b>*</b> stream)","lib":"stdio.h","purpose":"Input of characters and strings","code":"fgets(^^)"},"fopen":{"fullname":"<b>FILE*</b> fopen(<b>string</b> filename, <b>string</b> mode)","name":"fopen(<b>string</b> filename, <b>string</b> mode)","lib":"stdio.h","purpose":"Opens a file","code":"fopen(^^)"},"fflush":{"fullname":"<b>int</b> fflush(<b>FILE *</b> stream)","name":"fflush(<b>FILE *</b> stream)","lib":"stdio.h","purpose":"Flush a stream","code":"fflush(^^)"},"fseek":{"fullname":"<b>int</b> fseek(<b>FILE*</b> fp, <b>long <b>int</b> offset, <b>int</b> from_where)","name":"fseek(<b>FILE*</b> fp, <b>long <b>int</b> offset, <b>int</b> from_where)","lib":"stdio.h","purpose":"Sets file position","code":"fseek(^^)"},"ftell":{"fullname":"<b>long</b> ftell(<b>FILE *</b> stream)","name":"ftell(<b>FILE *</b> stream)","lib":"stdio.h","purpose":"Reposition a stream","code":"ftell(^^)"},"rewind":{"fullname":"<b>void</b> rewind(<b>FILE *</b> stream)","name":"rewind(<b>FILE *</b> stream)","lib":"stdio.h","purpose":"Reposition a stream","code":"rewind(^^)"},"fgetpos":{"fullname":"<b>int</b> fgetpos(<b>FILE *</b> stream, <b>fpos_t <b>*</b> pos)","name":"fgetpos(<b>FILE *</b> stream, <b>fpos_t <b>*</b> pos)","lib":"stdio.h","purpose":"Reposition a stream","code":"fgetpos(^^)"},"fsetpos":{"fullname":"<b>int</b> fsetpos(<b>FILE *</b> stream, <b>fpos_t <b>*</b> pos)","name":"fsetpos(<b>FILE *</b> stream, <b>fpos_t <b>*</b> pos)","lib":"stdio.h","purpose":"Reposition a stream","code":"fsetpos(^^)"},"fprintf":{"fullname":"<b>int</b> fprintf(<b>FILE *</b> stream, <b>const <b>char <b>*</b> format,</b> ...)","name":"fprintf(<b>FILE *</b> stream, <b>const <b>char <b>*</b> format,</b> ...)","lib":"stdio.h","purpose":"Formatted output conversion","code":"fprintf(^^)"},"fputc":{"fullname":"<b>int</b> fputc(<b>int</b> c, <b>FILE <b>*</b> stream)","name":"fputc(<b>int</b> c, <b>FILE <b>*</b> stream)","lib":"stdio.h","purpose":"Output of characters and strings","code":"fputc(^^)"},"fputs":{"fullname":"<b>int</b> fputs(<b>const char *</b> s, <b>FILE <b>*</b> stream)","name":"fputs(<b>const char *</b> s, <b>FILE <b>*</b> stream)","lib":"stdio.h","purpose":"Output of characters and strings","code":"fputs(^^)"},"fread":{"fullname":"<b>size_t</b> fread(<b>void*</b> ptr, <b>size_t</b> size, <b>size_t</b> blocks, <b>FILE*</b> fp)","name":"fread(<b>void*</b> ptr, <b>size_t</b> size, <b>size_t</b> blocks, <b>FILE*</b> fp)","lib":"stdio.h","purpose":"Read from a file","code":"fread(^^)"},"fscanf":{"fullname":"<b>int</b> fscanf(<b>FILE *</b> stream, <b>const <b>char <b>*</b> format,</b> ...)","name":"fscanf(<b>FILE *</b> stream, <b>const <b>char <b>*</b> format,</b> ...)","lib":"stdio.h","purpose":"Input format conversion","code":"fscanf(^^)"},"fwrite":{"fullname":"<b>size_t</b> fwrite(<b>void*</b> ptr, <b>size_t</b> size, <b>size_t</b> blocks, <b>FILE*</b> fp)","name":"fwrite(<b>void*</b> ptr, <b>size_t</b> size, <b>size_t</b> blocks, <b>FILE*</b> fp)","lib":"stdio.h","purpose":"Write to a file","code":"fwrite(^^)"},"FILE":{"fullname":"<b>*tmpfile</b> FILE(<b>void)","name":"FILE(<b>void)","lib":"stdio.h","purpose":"Create a temporary file","code":"FILE(^^)"},"getc":{"fullname":"<b>int</b> getc(<b>FILE *</b> stream)","name":"getc(<b>FILE *</b> stream)","lib":"stdio.h","purpose":"Input of characters and strings","code":"getc(^^)"},"getchar":{"fullname":"<b>int</b> getchar(<b>void)","name":"getchar(<b>void)","lib":"stdio.h","purpose":"Input of characters and strings","code":"getchar(^^)"},"gets":{"fullname":"<b>char *</b> gets(<b>char *</b> s)","name":"gets(<b>char *</b> s)","lib":"stdio.h","purpose":"Input of characters and strings","code":"gets(^^)"},"ungetc":{"fullname":"<b>int</b> ungetc(<b>int</b> c, <b>FILE <b>*</b> stream)","name":"ungetc(<b>int</b> c, <b>FILE <b>*</b> stream)","lib":"stdio.h","purpose":"Input of characters and strings","code":"ungetc(^^)"},"printf":{"fullname":"<b>int</b> printf(<b>const char *</b> format,</b> ...)","name":"printf(<b>const char *</b> format,</b> ...)","lib":"stdio.h","purpose":"Formatted output conversion","code":"printf(^^)"},"perror":{"fullname":"<b>void</b> perror(<b>const char *</b> s)","name":"perror(<b>const char *</b> s)","lib":"stdio.h","purpose":"Print a system error message","code":"perror(^^)"},"putc":{"fullname":"<b>int</b> putc(<b>int</b> c, <b>FILE <b>*</b> stream)","name":"putc(<b>int</b> c, <b>FILE <b>*</b> stream)","lib":"stdio.h","purpose":"Output of characters and strings","code":"putc(^^)"},"putchar":{"fullname":"<b>int</b> putchar(<b>int</b> c)","name":"putchar(<b>int</b> c)","lib":"stdio.h","purpose":"Output of characters and strings","code":"putchar(^^)"},"puts":{"fullname":"<b>int</b> puts(<b>const char *</b> s)","name":"puts(<b>const char *</b> s)","lib":"stdio.h","purpose":"Output of characters and strings","code":"puts(^^)"},"scanf":{"fullname":"<b>int</b> scanf(<b>const char *</b> format,</b> ...)","name":"scanf(<b>const char *</b> format,</b> ...)","lib":"stdio.h","purpose":"Input format conversion","code":"scanf(^^)"},"remove":{"fullname":"<b>int</b> remove(<b>const char *</b> pathname)","name":"remove(<b>const char *</b> pathname)","lib":"stdio.h","purpose":"Remove a file or directory","code":"remove(^^)"},"setbuf":{"fullname":"<b>void</b> setbuf(<b>FILE *</b> stream, <b>char <b>*</b> buf)","name":"setbuf(<b>FILE *</b> stream, <b>char <b>*</b> buf)","lib":"stdio.h","purpose":"Stream buffering operations","code":"setbuf(^^)"},"setbuffer":{"fullname":"<b>void</b> setbuffer(<b>FILE *</b> stream, <b>char <b>*</b> buf, <b>size_t</b> size)","name":"setbuffer(<b>FILE *</b> stream, <b>char <b>*</b> buf, <b>size_t</b> size)","lib":"stdio.h","purpose":"Stream buffering operations","code":"setbuffer(^^)"},"setlinebuf":{"fullname":"<b>void</b> setlinebuf(<b>FILE *</b> stream)","name":"setlinebuf(<b>FILE *</b> stream)","lib":"stdio.h","purpose":"Stream buffering operations","code":"setlinebuf(^^)"},"setvbuf":{"fullname":"<b>int</b> setvbuf(<b>FILE *</b> stream, <b>char <b>*</b> buf, <b>int</b> mode, <b>size_t</b> size)","name":"setvbuf(<b>FILE *</b> stream, <b>char <b>*</b> buf, <b>int</b> mode, <b>size_t</b> size)","lib":"stdio.h","purpose":"Stream buffering operations","code":"setvbuf(^^)"},"sprintf":{"fullname":"<b>int</b> sprintf(<b>char *</b> str, <b>const <b>char <b>*</b> format,</b> ...)","name":"sprintf(<b>char *</b> str, <b>const <b>char <b>*</b> format,</b> ...)","lib":"stdio.h","purpose":"Formatted output conversion","code":"sprintf(^^)"},"snprintf":{"fullname":"<b>int</b> snprintf(<b>char *</b> str, <b>size_t</b> size, <b>const <b>char <b>*</b> format,</b> ...)","name":"snprintf(<b>char *</b> str, <b>size_t</b> size, <b>const <b>char <b>*</b> format,</b> ...)","lib":"stdio.h","purpose":"Formatted output conversion","code":"snprintf(^^)"},"vprintf":{"fullname":"<b>int</b> vprintf(<b>const char *</b> format, <b>va_list</b> ap)","name":"vprintf(<b>const char *</b> format, <b>va_list</b> ap)","lib":"stdio.h","purpose":"Formatted output conversion","code":"vprintf(^^)"},"vfprintf":{"fullname":"<b>int</b> vfprintf(<b>FILE *</b> stream, <b>const <b>char <b>*</b> format, <b>va_list</b> ap)","name":"vfprintf(<b>FILE *</b> stream, <b>const <b>char <b>*</b> format, <b>va_list</b> ap)","lib":"stdio.h","purpose":"Formatted output conversion","code":"vfprintf(^^)"},"vsprintf":{"fullname":"<b>int</b> vsprintf(<b>char *</b> str, <b>const <b>char <b>*</b> format, <b>va_list</b> ap)","name":"vsprintf(<b>char *</b> str, <b>const <b>char <b>*</b> format, <b>va_list</b> ap)","lib":"stdio.h","purpose":"Formatted output conversion","code":"vsprintf(^^)"},"vsnprintf":{"fullname":"<b>int</b> vsnprintf(<b>char *</b> str, <b>size_t</b> size, <b>const <b>char <b>*</b> format, <b>va_list</b> ap)","name":"vsnprintf(<b>char *</b> str, <b>size_t</b> size, <b>const <b>char <b>*</b> format, <b>va_list</b> ap)","lib":"stdio.h","purpose":"Formatted output conversion","code":"vsnprintf(^^)"},"sscanf":{"fullname":"<b>int</b> sscanf(<b>const char *</b> str, <b>const <b>char <b>*</b> format,</b> ...)","name":"sscanf(<b>const char *</b> str, <b>const <b>char <b>*</b> format,</b> ...)","lib":"stdio.h","purpose":"Input format conversion","code":"sscanf(^^)"},"vscanf":{"fullname":"<b>int</b> vscanf(<b>const char *</b> format, <b>va_list</b> ap)","name":"vscanf(<b>const char *</b> format, <b>va_list</b> ap)","lib":"stdio.h","purpose":"Input format conversion","code":"vscanf(^^)"},"vsscanf":{"fullname":"<b>int</b> vsscanf(<b>const char *</b> str, <b>const <b>char <b>*</b> format, <b>va_list</b> ap)","name":"vsscanf(<b>const char *</b> str, <b>const <b>char <b>*</b> format, <b>va_list</b> ap)","lib":"stdio.h","purpose":"Input format conversion","code":"vsscanf(^^)"},"vfscanf":{"fullname":"<b>int</b> vfscanf(<b>FILE *</b> stream, <b>const <b>char <b>*</b> format, <b>va_list</b> ap)","name":"vfscanf(<b>FILE *</b> stream, <b>const <b>char <b>*</b> format, <b>va_list</b> ap)","lib":"stdio.h","purpose":"Input format conversion","code":"vfscanf(^^)"},"tempnam":{"fullname":"<b>char *</b> tempnam(<b>const char *</b> dir, <b>const <b>char <b>*</b> pfx)","name":"tempnam(<b>const char *</b> dir, <b>const <b>char <b>*</b> pfx)","lib":"stdio.h","purpose":"Create a name for a temporary file","code":"tempnam(^^)"},"abort":{"fullname":"<b>void</b> abort(<b>void)","name":"abort(<b>void)","lib":"stdlib.h","purpose":"Cause abnormal process termination","code":"abort(^^)"},"exit":{"fullname":"<b>void</b> exit(<b>int</b> status)","name":"exit(<b>int</b> status)","lib":"stdlib.h","purpose":"Cause normal process termination","code":"exit(^^)"},"atoi":{"fullname":"<b>int</b> atoi(<b>string</b> str)","name":"atoi(<b>string</b> str)","lib":"stdlib.h","purpose":"Convert a string to an integer","code":"atoi(^^)"},"atof":{"fullname":"<b>double</b> atof(<b>const char *</b> nptr)","name":"atof(<b>const char *</b> nptr)","lib":"stdlib.h","purpose":"Convert a string to a double","code":"atof(^^)"},"atexit":{"fullname":"<b>int</b> atexit(<b>void ( *</b> ) <b>( <b>void</b> )</b> function)","name":"atexit(<b>void ( *</b> ) <b>( <b>void</b> )</b> function)","lib":"stdlib.h","purpose":"Register a function to be called at normal process termination","code":"atexit(^^)"},"bsearch":{"fullname":"<b>void *</b> bsearch(<b>const void *</b> key, <b>const <b>void <b>*</b> base, <b>size_t</b> nmemb, <b>size_t</b> size, <b>int <b>( <b>*</b> ) <b>( <b>const <b>void</b> *, <b>const <b>void</b> *)</b> compar)","name":"bsearch(<b>const void *</b> key, <b>const <b>void <b>*</b> base, <b>size_t</b> nmemb, <b>size_t</b> size, <b>int <b>( <b>*</b> ) <b>( <b>const <b>void</b> *, <b>const <b>void</b> *)</b> compar)","lib":"stdlib.h","purpose":"Binary search of a sorted array","code":"bsearch(^^)"},"calloc":{"fullname":"<b>void*</b> calloc(<b>size_t</b> items, <b>size_t</b> size)","name":"calloc(<b>size_t</b> items, <b>size_t</b> size)","lib":"stdlib.h","purpose":"Allocate memory and set it to zero","code":"calloc(^^)"},"drand48":{"fullname":"<b>double</b> drand48(<b>void)","name":"drand48(<b>void)","lib":"stdlib.h","purpose":"Returns a pseudorandom integer using 48-bit integer arithmetic","code":"drand48(^^)"},"div":{"fullname":"<b>div_t</b> div(<b>int</b> numerator, <b>int</b> denominator)","name":"div(<b>int</b> numerator, <b>int</b> denominator)","lib":"stdlib.h","purpose":"Compute quotient and remainder of an integer division","code":"div(^^)"},"ldiv":{"fullname":"<b>ldiv_t</b> ldiv(<b>long</b> numerator, <b>long</b> denominator)","name":"ldiv(<b>long</b> numerator, <b>long</b> denominator)","lib":"stdlib.h","purpose":"Compute quotient and remainder of an integer division","code":"ldiv(^^)"},"lldiv":{"fullname":"<b>lldiv_t</b> lldiv(<b>long long</b> numerator, <b>long <b>long</b> denominator)","name":"lldiv(<b>long long</b> numerator, <b>long <b>long</b> denominator)","lib":"stdlib.h","purpose":"Compute quotient and remainder of an integer division","code":"lldiv(^^)"},"imaxdiv":{"fullname":"<b>imaxdiv_t</b> imaxdiv(<b>intmax_t</b> numerator, <b>intmax_t</b> denominator)","name":"imaxdiv(<b>intmax_t</b> numerator, <b>intmax_t</b> denominator)","lib":"stdlib.h","purpose":"Compute quotient and remainder of an integer division","code":"imaxdiv(^^)"},"free":{"fullname":"<b>void</b> free(<b>void*</b> ptr)","name":"free(<b>void*</b> ptr)","lib":"stdlib.h","purpose":"Free dynamically allocated memory","code":"free(^^)"},"abs":{"fullname":"<b>int</b> abs(<b>int</b> j)","name":"abs(<b>int</b> j)","lib":"stdlib.h","purpose":"Compute the absolute value of an integer","code":"abs(^^)"},"labs":{"fullname":"<b>long int</b> labs(<b>long int</b> j)","name":"labs(<b>long int</b> j)","lib":"stdlib.h","purpose":"Compute the absolute value of an integer","code":"labs(^^)"},"llabs":{"fullname":"<b>long long int</b> llabs(<b>long long int</b> j)","name":"llabs(<b>long long int</b> j)","lib":"stdlib.h","purpose":"Compute the absolute value of an integer","code":"llabs(^^)"},"imaxabs":{"fullname":"<b>intmax_t</b> imaxabs(<b>intmax_t</b> j)","name":"imaxabs(<b>intmax_t</b> j)","lib":"stdlib.h","purpose":"Compute the absolute value of an integer","code":"imaxabs(^^)"},"getenv":{"fullname":"<b>char *</b> getenv(<b>const char *</b> name)","name":"getenv(<b>const char *</b> name)","lib":"stdlib.h","purpose":"Get an environment variable","code":"getenv(^^)"},"secure_getenv":{"fullname":"<b>char *</b> secure_getenv(<b>const char *</b> name)","name":"secure_getenv(<b>const char *</b> name)","lib":"stdlib.h","purpose":"Get an environment variable","code":"secure_getenv(^^)"},"malloc":{"fullname":"<b>void*</b> malloc(<b>size_t</b> size)","name":"malloc(<b>size_t</b> size)","lib":"stdlib.h","purpose":"Allocate memory","code":"malloc(^^)"},"mblen":{"fullname":"<b>int</b> mblen(<b>const char *</b> s, <b>size_t</b> n)","name":"mblen(<b>const char *</b> s, <b>size_t</b> n)","lib":"stdlib.h","purpose":"Determine number of bytes in next multibyte character","code":"mblen(^^)"},"mbstowcs":{"fullname":"<b>size_t</b> mbstowcs(<b>wchar_t *</b> dest, <b>const <b>char <b>*</b> src, <b>size_t</b> n)","name":"mbstowcs(<b>wchar_t *</b> dest, <b>const <b>char <b>*</b> src, <b>size_t</b> n)","lib":"stdlib.h","purpose":"Convert a multibyte string to a wide-character string","code":"mbstowcs(^^)"},"mbtowc":{"fullname":"<b>int</b> mbtowc(<b>wchar_t *</b> pwc, <b>const <b>char <b>*</b> s, <b>size_t</b> n)","name":"mbtowc(<b>wchar_t *</b> pwc, <b>const <b>char <b>*</b> s, <b>size_t</b> n)","lib":"stdlib.h","purpose":"Convert a multibyte sequence to a wide character","code":"mbtowc(^^)"},"rand":{"fullname":"<b>int</b> rand(<b>void)","name":"rand(<b>void)","lib":"stdlib.h","purpose":"Returns a pseudorandom integer","code":"rand(^^)"},"realloc":{"fullname":"<b>void*</b> realloc(<b>void*</b> ptr, <b>size_t</b> size)","name":"realloc(<b>void*</b> ptr, <b>size_t</b> size)","lib":"stdlib.h","purpose":"Reallocate memory previously allocated","code":"realloc(^^)"},"srand":{"fullname":"<b>void</b> srand(<b>unsigned int</b> seed)","name":"srand(<b>unsigned int</b> seed)","lib":"stdlib.h","purpose":"Seed the pseudorandom generator `rand`","code":"srand(^^)"},"srand48":{"fullname":"<b>void</b> srand48(<b>long int</b> seedval)","name":"srand48(<b>long int</b> seedval)","lib":"stdlib.h","purpose":"Seeds the pseudorandom generator drand48()","code":"srand48(^^)"},"qsort":{"fullname":"<b>void</b> qsort(<b>void *</b> base, <b>size_t</b> nmemb, <b>size_t</b> size, <b>int <b>( <b>*</b> ) <b>( <b>const <b>void</b> *, <b>const <b>void</b> *)</b> compar)","name":"qsort(<b>void *</b> base, <b>size_t</b> nmemb, <b>size_t</b> size, <b>int <b>( <b>*</b> ) <b>( <b>const <b>void</b> *, <b>const <b>void</b> *)</b> compar)","lib":"stdlib.h","purpose":"Sort an array","code":"qsort(^^)"},"qsort_r":{"fullname":"<b>void</b> qsort_r(<b>void *</b> base, <b>size_t</b> nmemb, <b>size_t</b> size, <b>int <b>( <b>*</b> ) <b>( <b>const <b>void</b> *, <b>const <b>void</b> *, <b>void</b> *)</b> compar, <b>void <b>*</b> arg)","name":"qsort_r(<b>void *</b> base, <b>size_t</b> nmemb, <b>size_t</b> size, <b>int <b>( <b>*</b> ) <b>( <b>const <b>void</b> *, <b>const <b>void</b> *, <b>void</b> *)</b> compar, <b>void <b>*</b> arg)","lib":"stdlib.h","purpose":"Sort an array","code":"qsort_r(^^)"},"strtod":{"fullname":"<b>double</b> strtod(<b>const char *</b> nptr, <b>char <b>**</b> endptr)","name":"strtod(<b>const char *</b> nptr, <b>char <b>**</b> endptr)","lib":"stdlib.h","purpose":"Convert ASCII string to floating-point number","code":"strtod(^^)"},"strtof":{"fullname":"<b>float</b> strtof(<b>const char *</b> nptr, <b>char <b>**</b> endptr)","name":"strtof(<b>const char *</b> nptr, <b>char <b>**</b> endptr)","lib":"stdlib.h","purpose":"Convert ASCII string to floating-point number","code":"strtof(^^)"},"strtold":{"fullname":"<b>long double</b> strtold(<b>const char *</b> nptr, <b>char <b>**</b> endptr)","name":"strtold(<b>const char *</b> nptr, <b>char <b>**</b> endptr)","lib":"stdlib.h","purpose":"Convert ASCII string to floating-point number","code":"strtold(^^)"},"strtol":{"fullname":"<b>long int</b> strtol(<b>const char *</b> nptr, <b>char <b>**</b> endptr, <b>int</b> base)","name":"strtol(<b>const char *</b> nptr, <b>char <b>**</b> endptr, <b>int</b> base)","lib":"stdlib.h","purpose":"Convert a string to a long integer","code":"strtol(^^)"},"strtoll":{"fullname":"<b>long long int</b> strtoll(<b>const char *</b> nptr, <b>char <b>**</b> endptr, <b>int</b> base)","name":"strtoll(<b>const char *</b> nptr, <b>char <b>**</b> endptr, <b>int</b> base)","lib":"stdlib.h","purpose":"Convert a string to a long integer","code":"strtoll(^^)"},"strtoul":{"fullname":"<b>unsigned long int</b> strtoul(<b>const char *</b> nptr, <b>char <b>**</b> endptr, <b>int</b> base)","name":"strtoul(<b>const char *</b> nptr, <b>char <b>**</b> endptr, <b>int</b> base)","lib":"stdlib.h","purpose":"Convert a string to an unsigned long integer","code":"strtoul(^^)"},"strtoull":{"fullname":"<b>unsigned long long int</b> strtoull(<b>const char *</b> nptr, <b>char <b>**</b> endptr, <b>int</b> base)","name":"strtoull(<b>const char *</b> nptr, <b>char <b>**</b> endptr, <b>int</b> base)","lib":"stdlib.h","purpose":"Convert a string to an unsigned long integer","code":"strtoull(^^)"},"wcstombs":{"fullname":"<b>size_t</b> wcstombs(<b>char *</b> dest, <b>const <b>wchar_t <b>*</b> src, <b>size_t</b> n)","name":"wcstombs(<b>char *</b> dest, <b>const <b>wchar_t <b>*</b> src, <b>size_t</b> n)","lib":"stdlib.h","purpose":"Convert a wide-character string to a multibyte string","code":"wcstombs(^^)"},"system":{"fullname":"<b>int</b> system(<b>const char *</b> command)","name":"system(<b>const char *</b> command)","lib":"stdlib.h","purpose":"Execute a shell command","code":"system(^^)"},"memcmp":{"fullname":"<b>int</b> memcmp(<b>const void *</b> s1, <b>const <b>void <b>*</b> s2, <b>size_t</b> n)","name":"memcmp(<b>const void *</b> s1, <b>const <b>void <b>*</b> s2, <b>size_t</b> n)","lib":"string.h","purpose":"Compare memory areas","code":"memcmp(^^)"},"wctomb":{"fullname":"<b>int</b> wctomb(<b>char *</b> s, <b>wchar_t</b> wc)","name":"wctomb(<b>char *</b> s, <b>wchar_t</b> wc)","lib":"stdlib.h","purpose":"Convert a wide character to a multibyte sequence","code":"wctomb(^^)"},"memchr":{"fullname":"<b>void *</b> memchr(<b>const void *</b> s, <b>int</b> c, <b>size_t</b> n)","name":"memchr(<b>const void *</b> s, <b>int</b> c, <b>size_t</b> n)","lib":"string.h","purpose":"Scan memory for a character","code":"memchr(^^)"},"memrchr":{"fullname":"<b>void *</b> memrchr(<b>const void *</b> s, <b>int</b> c, <b>size_t</b> n)","name":"memrchr(<b>const void *</b> s, <b>int</b> c, <b>size_t</b> n)","lib":"string.h","purpose":"Scan memory for a character","code":"memrchr(^^)"},"rawmemchr":{"fullname":"<b>void *</b> rawmemchr(<b>const void *</b> s, <b>int</b> c)","name":"rawmemchr(<b>const void *</b> s, <b>int</b> c)","lib":"string.h","purpose":"Scan memory for a character","code":"rawmemchr(^^)"},"memmove":{"fullname":"<b>void *</b> memmove(<b>void *</b> dest, <b>const <b>void <b>*</b> src, <b>size_t</b> n)","name":"memmove(<b>void *</b> dest, <b>const <b>void <b>*</b> src, <b>size_t</b> n)","lib":"string.h","purpose":"Copy memory area","code":"memmove(^^)"},"memset":{"fullname":"<b>void *</b> memset(<b>void *</b> s, <b>int</b> c, <b>size_t</b> n)","name":"memset(<b>void *</b> s, <b>int</b> c, <b>size_t</b> n)","lib":"string.h","purpose":"Fill memory with a constant byte","code":"memset(^^)"},"strcmp":{"fullname":"<b>int</b> strcmp(<b>string</b> str1, <b>string</b> str2)","name":"strcmp(<b>string</b> str1, <b>string</b> str2)","lib":"string.h","purpose":"Compare two strings","code":"strcmp(^^)"},"strcpy":{"fullname":"<b>string</b> strcpy(<b>string</b> destination, <b>string</b> source)","name":"strcpy(<b>string</b> destination, <b>string</b> source)","lib":"string.h","purpose":"Copy a string","code":"strcpy(^^)"},"strcat":{"fullname":"<b>char *</b> strcat(<b>char *</b> dest, <b>const <b>char <b>*</b> src)","name":"strcat(<b>char *</b> dest, <b>const <b>char <b>*</b> src)","lib":"string.h","purpose":"Concatenate two strings","code":"strcat(^^)"},"strncat":{"fullname":"<b>char *</b> strncat(<b>char *</b> dest, <b>const <b>char <b>*</b> src, <b>size_t</b> n)","name":"strncat(<b>char *</b> dest, <b>const <b>char <b>*</b> src, <b>size_t</b> n)","lib":"string.h","purpose":"Concatenate two strings","code":"strncat(^^)"},"strchr":{"fullname":"<b>char *</b> strchr(<b>const char *</b> s, <b>int</b> c)","name":"strchr(<b>const char *</b> s, <b>int</b> c)","lib":"string.h","purpose":"Locate character in string","code":"strchr(^^)"},"strrchr":{"fullname":"<b>char *</b> strrchr(<b>const char *</b> s, <b>int</b> c)","name":"strrchr(<b>const char *</b> s, <b>int</b> c)","lib":"string.h","purpose":"Locate character in string","code":"strrchr(^^)"},"strchrnul":{"fullname":"<b>char *</b> strchrnul(<b>const char *</b> s, <b>int</b> c)","name":"strchrnul(<b>const char *</b> s, <b>int</b> c)","lib":"string.h","purpose":"Locate character in string","code":"strchrnul(^^)"},"strcoll":{"fullname":"<b>int</b> strcoll(<b>const char *</b> s1, <b>const <b>char <b>*</b> s2)","name":"strcoll(<b>const char *</b> s1, <b>const <b>char <b>*</b> s2)","lib":"string.h","purpose":"Compare two strings using the current locale","code":"strcoll(^^)"},"strlen":{"fullname":"<b>size_t</b> strlen(<b>string</b> str)","name":"strlen(<b>string</b> str)","lib":"string.h","purpose":"Return length of a string","code":"strlen(^^)"},"strspn":{"fullname":"<b>size_t</b> strspn(<b>const char *</b> s, <b>const <b>char <b>*</b> accept)","name":"strspn(<b>const char *</b> s, <b>const <b>char <b>*</b> accept)","lib":"string.h","purpose":"Search a string for a set of bytes","code":"strspn(^^)"},"strcspn":{"fullname":"<b>size_t</b> strcspn(<b>const char *</b> s, <b>const <b>char <b>*</b> reject)","name":"strcspn(<b>const char *</b> s, <b>const <b>char <b>*</b> reject)","lib":"string.h","purpose":"Search a string for a set of bytes","code":"strcspn(^^)"},"strerror":{"fullname":"<b>char *</b> strerror(<b>int</b> errnum)","name":"strerror(<b>int</b> errnum)","lib":"string.h","purpose":"Return string describing error number","code":"strerror(^^)"},"strerror_r":{"fullname":"<b>char *</b> strerror_r(<b>int</b> errnum, <b>char <b>*</b> buf, <b>size_t</b> buflen)","name":"strerror_r(<b>int</b> errnum, <b>char <b>*</b> buf, <b>size_t</b> buflen)","lib":"string.h","purpose":"Return string describing error number","code":"strerror_r(^^)"},"strpbrk":{"fullname":"<b>char *</b> strpbrk(<b>const char *</b> s, <b>const <b>char <b>*</b> accept)","name":"strpbrk(<b>const char *</b> s, <b>const <b>char <b>*</b> accept)","lib":"string.h","purpose":"Search a string for any of a set of bytes","code":"strpbrk(^^)"},"strstr":{"fullname":"<b>char *</b> strstr(<b>const char *</b> haystack, <b>const <b>char <b>*</b> needle)","name":"strstr(<b>const char *</b> haystack, <b>const <b>char <b>*</b> needle)","lib":"string.h","purpose":"Locate a substring","code":"strstr(^^)"},"strcasestr":{"fullname":"<b>char *</b> strcasestr(<b>const char *</b> haystack, <b>const <b>char <b>*</b> needle)","name":"strcasestr(<b>const char *</b> haystack, <b>const <b>char <b>*</b> needle)","lib":"string.h","purpose":"Locate a substring","code":"strcasestr(^^)"},"strtok":{"fullname":"<b>char *</b> strtok(<b>char *</b> str, <b>const <b>char <b>*</b> delim)","name":"strtok(<b>char *</b> str, <b>const <b>char <b>*</b> delim)","lib":"string.h","purpose":"Extract tokens from strings","code":"strtok(^^)"},"strtok_r":{"fullname":"<b>char *</b> strtok_r(<b>char *</b> str, <b>const <b>char <b>*</b> delim, <b>char <b>**</b> saveptr)","name":"strtok_r(<b>char *</b> str, <b>const <b>char <b>*</b> delim, <b>char <b>**</b> saveptr)","lib":"string.h","purpose":"Extract tokens from strings","code":"strtok_r(^^)"},"strxfrm":{"fullname":"<b>size_t</b> strxfrm(<b>char *</b> dest, <b>const <b>char <b>*</b> src, <b>size_t</b> n)","name":"strxfrm(<b>char *</b> dest, <b>const <b>char <b>*</b> src, <b>size_t</b> n)","lib":"string.h","purpose":"String transformation","code":"strxfrm(^^)"},"clock":{"fullname":"<b>clock_t</b> clock(<b>void)","name":"clock(<b>void)","lib":"time.h","purpose":"Determine processor time","code":"clock(^^)"},"asctime":{"fullname":"<b>char *</b> asctime(<b>const struct tm *</b> tm)","name":"asctime(<b>const struct tm *</b> tm)","lib":"time.h","purpose":"Transform date and time to broken-down time or ASCII","code":"asctime(^^)"},"asctime_r":{"fullname":"<b>char *</b> asctime_r(<b>const struct tm *</b> tm, <b>char <b>*</b> buf)","name":"asctime_r(<b>const struct tm *</b> tm, <b>char <b>*</b> buf)","lib":"time.h","purpose":"Transform date and time to broken-down time or ASCII","code":"asctime_r(^^)"},"ctime":{"fullname":"<b>char *</b> ctime(<b>const time_t *</b> timep)","name":"ctime(<b>const time_t *</b> timep)","lib":"time.h","purpose":"Transform date and time to broken-down time or ASCII","code":"ctime(^^)"},"ctime_r":{"fullname":"<b>char *</b> ctime_r(<b>const time_t *</b> timep, <b>char <b>*</b> buf)","name":"ctime_r(<b>const time_t *</b> timep, <b>char <b>*</b> buf)","lib":"time.h","purpose":"Transform date and time to broken-down time or ASCII","code":"ctime_r(^^)"},"tm":{"fullname":"<b>struct  *localtime_r</b> tm(<b>const time_t *</b> timep, <b>struct <b>tm <b>*</b> result)","name":"tm(<b>const time_t *</b> timep, <b>struct <b>tm <b>*</b> result)","lib":"time.h","purpose":"Transform date and time to broken-down time or ASCII","code":"tm(^^)"},"mktime":{"fullname":"<b>time_t</b> mktime(<b>struct tm *</b> tm)","name":"mktime(<b>struct tm *</b> tm)","lib":"time.h","purpose":"Transform date and time to broken-down time or ASCII","code":"mktime(^^)"},"difftime":{"fullname":"<b>double</b> difftime(<b>time_t</b> time1, <b>time_t</b> time0)","name":"difftime(<b>time_t</b> time1, <b>time_t</b> time0)","lib":"time.h","purpose":"Calculate time difference","code":"difftime(^^)"},"strftime":{"fullname":"<b>size_t</b> strftime(<b>char *</b> s, <b>size_t</b> max, <b>const <b>char <b>*</b> format, <b>const <b>struct <b>tm <b>*</b> tm)","name":"strftime(<b>char *</b> s, <b>size_t</b> max, <b>const <b>char <b>*</b> format, <b>const <b>struct <b>tm <b>*</b> tm)","lib":"time.h","purpose":"Format date and time","code":"strftime(^^)"},"time":{"fullname":"<b>time_t</b> time(<b>time_t *</b> tloc)","name":"time(<b>time_t *</b> tloc)","lib":"time.h","purpose":"Get time","code":"time(^^)"}};
})